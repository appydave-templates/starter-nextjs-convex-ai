name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  deployments: write
  pull-requests: read

env:
  HUSKY: 0
  NODE_ENV: production

jobs:
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for Gitleaks

      - name: Install Gitleaks
        run: |
          GITLEAKS_VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          curl -sSL "https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz" | tar -xz
          sudo mv gitleaks /usr/local/bin/
          gitleaks version

      - name: Run Gitleaks
        run: |
          gitleaks detect --config=.gitleaks.toml --verbose --exit-code=1

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run ESLint
        run: bun run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run unit tests with coverage
        env:
          NODE_ENV: test
        run: |
          cd apps/web && bun run test:ci

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/web/coverage

      - name: Check coverage thresholds
        env:
          NODE_ENV: test
        run: |
          echo "Coverage thresholds already checked in test:ci step above"

      - name: Generate Convex files
        run: |
          cd apps/convex && bun run build

      - name: Run type checks
        run: bun run typecheck

  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check if E2E tests exist
        id: check-e2e
        run: |
          if [ -d "tests/e2e" ] && [ "$(ls -A tests/e2e 2>/dev/null)" ]; then
            echo "e2e_exists=true" >> $GITHUB_OUTPUT
          else
            echo "e2e_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Playwright browsers
        if: steps.check-e2e.outputs.e2e_exists == 'true'
        run: bun run test:e2e:install

      - name: Run E2E tests
        if: steps.check-e2e.outputs.e2e_exists == 'true'
        run: bun run test:e2e

      - name: Skip E2E tests
        if: steps.check-e2e.outputs.e2e_exists == 'false'
        run: echo "No E2E tests found, skipping..."

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [security, lint, test]
    env:
      NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
      NEXT_PUBLIC_CONVEX_URL: ${{ secrets.NEXT_PUBLIC_CONVEX_URL }}
      NEXT_PUBLIC_LOG_WORKER_URL: ${{ secrets.NEXT_PUBLIC_LOG_WORKER_URL }}
      NEXT_PUBLIC_GITHUB_REPO: ${{ secrets.NEXT_PUBLIC_GITHUB_REPO }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Debug Environment Variables
        run: |
          echo "=== Checking if GitHub Secrets are configured ==="
          [ -n "${{ secrets.NEXT_PUBLIC_APP_URL }}" ] && echo "✅ NEXT_PUBLIC_APP_URL secret exists" || echo "❌ NEXT_PUBLIC_APP_URL secret missing"
          [ -n "${{ secrets.NEXT_PUBLIC_CONVEX_URL }}" ] && echo "✅ NEXT_PUBLIC_CONVEX_URL secret exists" || echo "❌ NEXT_PUBLIC_CONVEX_URL secret missing"
          [ -n "${{ secrets.NEXT_PUBLIC_LOG_WORKER_URL }}" ] && echo "✅ NEXT_PUBLIC_LOG_WORKER_URL secret exists" || echo "❌ NEXT_PUBLIC_LOG_WORKER_URL secret missing"
          [ -n "${{ secrets.NEXT_PUBLIC_GITHUB_REPO }}" ] && echo "✅ NEXT_PUBLIC_GITHUB_REPO secret exists" || echo "❌ NEXT_PUBLIC_GITHUB_REPO secret missing"
          echo ""
          echo "=== Environment Variables (length check) ==="
          [ -n "$NEXT_PUBLIC_APP_URL" ] && echo "✅ NEXT_PUBLIC_APP_URL env var set (length: ${#NEXT_PUBLIC_APP_URL})" || echo "❌ NEXT_PUBLIC_APP_URL env var empty"
          [ -n "$NEXT_PUBLIC_CONVEX_URL" ] && echo "✅ NEXT_PUBLIC_CONVEX_URL env var set (length: ${#NEXT_PUBLIC_CONVEX_URL})" || echo "❌ NEXT_PUBLIC_CONVEX_URL env var empty"
          [ -n "$NEXT_PUBLIC_LOG_WORKER_URL" ] && echo "✅ NEXT_PUBLIC_LOG_WORKER_URL env var set (length: ${#NEXT_PUBLIC_LOG_WORKER_URL})" || echo "❌ NEXT_PUBLIC_LOG_WORKER_URL env var empty"
          [ -n "$NEXT_PUBLIC_GITHUB_REPO" ] && echo "✅ NEXT_PUBLIC_GITHUB_REPO env var set (length: ${#NEXT_PUBLIC_GITHUB_REPO})" || echo "❌ NEXT_PUBLIC_GITHUB_REPO env var empty"
          echo ""
          echo "=== All NEXT_PUBLIC env vars ==="
          env | grep NEXT_PUBLIC || echo "No NEXT_PUBLIC vars found"

      - name: Generate Convex files
        run: |
          cd apps/convex && bun run build

      - name: Build applications
        run: bun run build

      - name: Build for Cloudflare Pages
        run: |
          cd apps/web
          bun run build:pages

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: apps/web/dist
          retention-days: 1

  deploy:
    name: Deploy to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [build, test-e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    outputs:
      new_version: ${{ steps.version.outputs.NEW_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: apps/web/dist

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: apps/web/dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq for version management
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Increment version after successful deployment
        id: version
        env:
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
        run: |
          chmod +x ./scripts/version-increment.sh
          ./scripts/version-increment.sh "${{ github.sha }}" "$COMMIT_MESSAGE"

      - name: Commit updated version manifest
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add apps/web/public/version-manifest.json
          git commit -m "ci: update version manifest to v${{ steps.version.outputs.NEW_VERSION }}" || echo "No changes to commit"
          git push || echo "No changes to push"

      # Note: Required GitHub Secrets for Cloudflare Pages deployment:
      # - CLOUDFLARE_API_TOKEN: API token with Pages:Edit permission
      # - CLOUDFLARE_ACCOUNT_ID: Your Cloudflare account ID
      # - CLOUDFLARE_PROJECT_NAME: Name of your Cloudflare Pages project
